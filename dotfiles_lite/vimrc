" Cancel compatible to avoid some bugs and limitations.
set nocompatible

" Share clipboard with OS
set clipboard=unnamed

" True color
if has('termguicolors')
  if empty($COLORTERM) || $COLORTERM =~# 'truecolor\|24bit'
    set termguicolors
  endif
endif

" Set n lines to the cursor - when moving vertically using j/k
set scrolloff=7
set sidescrolloff=15
if has('mouse')
  set mouse=a
endif

" show location
set cursorline

" 设置 Backspace 键模式
set bs=eol,start,indent

" search
set hlsearch                    " highlight searches
set incsearch                   " do incremental searching, search as you type
set ignorecase                  " ignore case when searching
set smartcase                   " no ignorecase if Uppercase char present
set wildmenu                    " command line auto-complete
set wildmode=longest:list,full

" tab
set expandtab                   " expand tabs to spaces
set smarttab
set shiftround

" indent
set autoindent smartindent cindent
set shiftwidth=4
set tabstop=4
set softtabstop=4

" fold
set foldenable
set foldmethod=marker
set foldlevel=99
" No fold when vim start up
set nofoldenable

" Show whitespace
" set list listchars=extends:❯,precedes:❮,tab:▸\ ,trail:˽,space:·
set list
set listchars=tab:»·,nbsp:+,trail:·,extends:→,precedes:←


" history : how many lines of history VIM has to remember
set history=2000

" filetype
filetype on
" Enable filetype plugins
filetype plugin on
filetype indent on

" base
set autoread                    " reload files when changed on disk, i.e. via `git checkout`
set shortmess=atI

set magic                       " For regular expressions turn magic on
set title                       " change the terminal's title
set nobackup                    " do not keep a backup file

set novisualbell                " turn off visual bell
set noerrorbells                " don't beep
set visualbell t_vb=            " turn off error beep/flash
set t_vb=
set tm=500

" show
set ruler                       " show the current row and column
set number relativenumber
set wrap
set linebreak
set showcmd                     " display incomplete commands
set showmode                    " display current modes
set showmatch                   " jump to matches when entering parentheses
set matchpairs+=<:>     " Add HTML brackets to pair matching
set matchtime=2                 " tenths of a second to show the matching parenthesis
" 延迟绘制（提升性能）
set lazyredraw
" 错误格式
set errorformat+=[%f:%l]\ ->\ %m,[%f:%l]:%m
" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=m
" 合并两行中文时，不在中间加空格
set formatoptions+=B
" 文件换行符，默认使用 unix 换行符
set ffs=unix,dos,mac

" key-bindings

" leader
let mapleader = "\<Space>"
let maplocalleader = ","
noremap \ ,

" insert keymap like emacs
inoremap <C-w> <C-[>diwa
inoremap <C-h> <BS>
inoremap <C-d> <Del>
inoremap <C-k> <ESC>d$a
inoremap <C-u> <C-G>u<C-U>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-a> <Home>

" COPY PASTE
" 删除但不保存到剪切板
nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
nnoremap dd "_dd
nnoremap c "_c
nnoremap cc "_cc
nnoremap D "_D
vnoremap d "_d
vnoremap dd "_dd
vnoremap x "_x
vnoremap X "_X

vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
vmap "+y :w !pbcopy<CR><CR>
nmap "+p :r !pbpaste<CR><CR>

" Switch window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Remove spaces at the end of lines
nnoremap <silent> ,<Space> :<C-u>silent! keeppatterns %substitute/\s\+$//e<CR>

" settings for resize splitted window
nmap <C-w>[ :vertical resize -3<CR>
nmap <C-w>] :vertical resize +3<CR>

" Switch Tab with leader
noremap <silent><leader>1 1gt<CR>
noremap <silent><leader>2 2gt<CR>
noremap <silent><leader>3 3gt<CR>
noremap <silent><leader>4 4gt<CR>
noremap <silent><leader>5 5gt<CR>
noremap <silent><leader>6 6gt<CR>
noremap <silent><leader>7 7gt<CR>
noremap <silent><leader>8 8gt<CR>
noremap <silent><leader>9 9gt<CR>
noremap <silent><leader>0 10gt<CR>

" Improve sCRoll, CRedits: https://github.com/Shougo
nnoremap <expr> zz (winline() == (winheight(0)+1) / 2) ?
	\ 'zt' : (winline() == 1) ? 'zb' : 'zz'
noremap <expr> <C-f> max([winheight(0) - 2, 1])
	\ ."\<C-d>".(line('w$') >= line('$') ? "L" : "M")
noremap <expr> <C-b> max([winheight(0) - 2, 1])
	\ ."\<C-u>".(line('w0') <= 1 ? "H" : "M")
noremap <expr> <C-e> (line("w$") >= line('$') ? "j" : "3\<C-e>")
noremap <expr> <C-y> (line("w0") <= 1         ? "k" : "3\<C-y>")

" Meta Enhancement
" ALT+h/l 快速左右按单词移动（正常模式+插入模式）
noremap <m-h> b
noremap <m-l> w
inoremap <m-h> <c-left>
inoremap <m-l> <c-right>

" ALT+j/k 逻辑跳转下一行/上一行（按 wrap 逻辑换行进行跳转）
noremap <m-j> gj
noremap <m-k> gk
inoremap <m-j> <c-\><c-o>gj
inoremap <m-k> <c-\><c-o>gk

" 命令模式下的相同快捷
cnoremap <m-h> <c-left>
cnoremap <m-l> <c-right>

" ALT+y 删除到行末
noremap <m-y> d$
inoremap <m-y> <c-\><c-o>d$

" Save Buffer
nnoremap <leader>w :write<CR>
xnoremap <leader>w <Esc>:write<CR>
nnoremap <C-s> :<C-u>write<CR>
xnoremap <C-s> :<C-u>write<CR>
cnoremap <C-s> <C-u>write<CR>
inoremap <C-Q> <esc>:wq<CR>
nnoremap <leader>bc :BufOnly<CR>
nnoremap <leader>bo :BufOnly 
" Switch Buffer
nnoremap  ]b :bp<CR>
nnoremap  [b :bn<CR>
" Delete buffer
" nnoremap <C-x> :bd<CR>
nnoremap <leader>bd :bd<CR>

" insert a newline
inoremap <C-O> <Esc>o

" Switch File
nnoremap ]f :<C-U>edit <C-R>=<SID>fnameescape(fnamemodify(<SID>FileByOffset(v:count1), ':.'))<CR><CR>
nnoremap [f :<C-U>edit <C-R>=<SID>fnameescape(fnamemodify(<SID>FileByOffset(-v:count1), ':.'))<CR><CR>

" Smart move
noremap H ^
noremap L $

" Easier line-wise movement
nnoremap gh g^
nnoremap gl g$

nnoremap J G
nnoremap K gg
nnoremap j gj
nnoremap k gk

vnoremap J G
vnoremap K gg
vnoremap j gj
vnoremap k gk

nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv

" z+方向键快速跳转
nnoremap z<left> zk
nnoremap z<right> zj
nnoremap z<up> [z
nnoremap z<down> ]z
" z+hjkl快速跳转
nnoremap zh zk
nnoremap zl zj
nnoremap zj ]z
nnoremap zk [z
" zo递归局部打开折叠，zc递归局部关闭折叠
nnoremap zo zO
nnoremap zc zC
" zO递归全局打开折叠，C递归全局关闭折叠
nnoremap zO zR
nnoremap zC zM
" zf创建新的折叠，zd删除当前折叠
nnoremap zf zf
nnoremap zd zd
" zn创建新的折叠，并yard当前行的内容
nmap zn $vbda<Space><CR><Space><CR><Space><ESC>v<up><up>zfa<Backspace><down><right><Backspace><down><right><Backspace><up><up><Esc>A
" zs保存折叠视图，zl加载折叠视图
nnoremap zs :<C-u>mkview<CR>
nnoremap zl :<C-u>loadview<CR>

" Exchange Lines, work like 2]e
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<CR>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<CR>
" Add Lines, Work like 5[<Space>
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<CR>
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<CR>
" Start new line from any cursor position in insert-mode
inoremap <S-Return> <C-o>o

" Move Lines
nnoremap <S-Up> :m-2<CR>
nnoremap <S-Down> :m+<CR>
vnoremap <S-Up> :m'<-2<CR>gv=gv
vnoremap <S-Down> :m'>+<CR>gv=gv
inoremap <S-Up> <Esc>:m-2<CR>
inoremap <S-Down> <Esc>:m+<CR>

"]<End> or ]<Home> move current line to the end or the begin of current buffer
nnoremap <silent>]<End> ddGp``
nnoremap <silent>]<Home> ddggP``
vnoremap <silent>]<End> dGp``
vnoremap <silent>]<Home> dggP``

" Duplicate lines
nnoremap <leader>d m`YP``
vnoremap <leader>d YPgv
" Duplicate paragraph
nnoremap <leader>cp yap<S-}>p

" Tab operation
nmap <leader>tn :tabnew<CR>
nmap <leader>te :tabedit
nmap <leader>tc :tabclose<CR>
nmap <leader>tm :tabmove

nnoremap tn gt
nnoremap tp gT

" Yank to end
nnoremap Y y$
" Yank buffer's relative/absolute path to clipboard
nnoremap <leader>y :let @+=expand("%:~:.")<CR>:echo 'Yanked relative path'<CR>
nnoremap <leader>Y :let @+=expand("%:p")<CR>:echo 'Yanked absolute path'<CR>

" Indent and jump to first non-blank character linewise
nmap >>  >>_
nmap <<  <<_

" Re-select blocks after indenting in visual/select mode
xnoremap < <gv
xnoremap > >gv|

" Use tab for indenting in visual/select mode
xnoremap <Tab> >gv|
xnoremap <S-Tab> <gv

" nohl
nnoremap <Esc><Esc> :silent! nohls<CR>

" Remove spaces at the end of lines
nnoremap <leader>cw :<C-u>silent! keeppatterns %substitute/\s\+$//e<CR>

"cnoremap w!! w !sudo tee % >/dev/null
cnoremap <C-p> <Up>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
cnoremap <C-h> <BS>
cnoremap <C-t> <C-R>=expand("%:p:h") . "/" <CR>

" Quit
noremap <leader>e :q<CR>
noremap <leader>x :wq<CR>

nnoremap <silent> <leader>rc :source $MYVIMRC<CR>

call plug#begin('~/.vim/plugged')

" commenter {{{ "
Plug 'tyru/caw.vim' ", {'on': '<Plug>(caw:zeropos:toggle)'}
nmap <leader>/ <Plug>(caw:zeropos:toggle)
vmap <leader>/ <Plug>(caw:zeropos:toggle)
" }}} commenter "

" Undo {{{ "
Plug 'simnalamburt/vim-mundo',{'on': 'MundoToggle'}
" Enable persistent undo so that undo history persists across vim sessions
set undofile
set undodir=~/.vim/undo
nmap <leader>m :MundoToggle<CR>
" }}} Undo "

" Auto toggle paste mode when paste {{{ "
Plug 'ConradIrwin/vim-bracketed-paste'
" }}} Auto toggle paste mode when paste "

" numbertoggle {{{ "
Plug 'jeffkreeftmeijer/vim-numbertoggle'
" }}} numbertoggle "

" comfortable-motion {{{ "
Plug 'psliwka/vim-smoothie'
" }}} comfortable-motion "

" incsearch {{{ "
Plug 'haya14busa/incsearch.vim'
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" doesn't move the cursor
map g/ <Plug>(incsearch-stay)
Plug 'markonm/traces.vim'
" }}} incsearch "

Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['latex', 'markdown', 'c', 'cpp']
" tabular plugin is used to format tables
Plug 'ekalinin/Dockerfile.vim',           { 'for': ['dockerfile', 'docker-compose'] }
" Plug 'andrewstuart/vim-kubernetes',     { 'for': 'yaml'       }
" Plug 'vim-scripts/awk.vim',             { 'for': 'awk'        }
" Plug 'nelstrom/vim-textobj-rubyblock',  { 'for': 'ruby'       }
Plug 'tmux-plugins/vim-tmux',            { 'for': 'tmux'       }
" Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['cpp', 'c'] }
Plug 'bfrg/vim-cpp-modern', { 'for': ['c', 'cpp']}
" Plug 'ap/vim-css-color',                { 'for': 'css'        }
" Plug 'moll/vim-node',                   { 'for': 'node'       }
" Plug 'mattn/emmet-vim',                 { 'for': 'html'       }
" Plug 'othree/xml.vim',                  { 'for': 'xml'        }
Plug 'elzr/vim-json',                    { 'for': 'json'       }
Plug 'cespare/vim-toml',                 { 'for': 'toml'       }
" Plug 'pangloss/vim-javascript',         { 'for': 'javascript' }
" Plug 'martinda/Jenkinsfile-vim-syntax', { 'for': 'jenkins'    }
" Plug 'udalov/kotlin-vim',               { 'for': 'kotlin'     }
" Plug 'vim-ruby/vim-ruby',               { 'for': 'ruby'       }
" Plug 'tpope/vim-bundler',               { 'for': 'ruby'       }
" Plug 'tpope/vim-rake',                  { 'for': 'ruby'       }
" Plug 'jgdavey/vim-blockle',             { 'for': 'ruby'       }| let g:blockle_mapping = '<leader>B'
" Plug 'stephpy/vim-yaml',                { 'for': 'yaml'       }
Plug 'zinit-zsh/zinit-vim-syntax',       { 'for': 'zshrc' }
Plug 'vim-python/python-syntax',         { 'for': 'python'    }
Plug 'MTDL9/vim-log-highlighting',       { 'for': 'log'   }
Plug 'tpope/vim-git',                    { 'for': ['gitcommit', 'gitrebase', 'gitconfig']}
" Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'vim-jp/syntax-vim-ex',             { 'for': 'vim'   }
" Plug 'chr4/nginx.vim',                   { 'for': 'nginx'          }

Plug 'sainnhe/sonokai'
let g:sonokai_style = 'andromeda'
let g:sonokai_enable_italic = 1

call plug#end()

" Define some custom command
command! PU PlugUpgrade | PlugUpdate
command! PI PlugInstall
command! PC PlugClean

" Syntax
if has('syntax')
  syntax on
  set background=dark
  colorscheme sonokai
endif
